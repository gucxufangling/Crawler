# -*- coding: utf-8 -*-

# Define your item pipelines here
#
# Don't forget to add your pipeline to the ITEM_PIPELINES setting
# See: http://doc.scrapy.org/en/latest/topics/item-pipeline.html

import pymysql as db
from twisted.enterprise import adbapi

class DoubanBookPipeline(object):
    def __init__(self):
        self.con = db.connect(user="root", passwd="guc", host="localhost", db="testdb", charset="utf8")
        self.cur = self.con.cursor()
        self.cur.execute('drop table douban_books')
        self.cur.execute(
            "create table douban_books(id int auto_increment primary key,book_name varchar(200),book_star varchar(244),book_pl varchar(244),book_author varchar(200),book_publish varchar(200),book_date varchar(200),book_price varchar(200))")

    def process_item(self, item, spider):
        self.cur.execute(
            "insert into douban_books(id,book_name,book_star,book_pl,book_author,book_publish,book_date,book_price) values(NULL,%s,%s,%s,%s,%s,%s,%s)",
            (item['book_name'], item['book_star'], item['book_pl'], item['book_author'], item['book_publish'],
             item['book_date'], item['book_price']))
        self.con.commit()
        return item


class MySQLStorePipeline(object):
    """A pipeline to store the item in a MySQL database.
    This implementation uses Twisted's asynchronous database API.
    """

    def __init__(self, dbpool):
        self.dbpool = dbpool

    @classmethod
    def from_settings(cls, settings):
        dbargs = dict(
            host=settings['MYSQL_HOST'],
            db=settings['MYSQL_DBNAME'],
            user=settings['MYSQL_USER'],
            passwd=settings['MYSQL_PASSWD'],
            charset='utf8',
            use_unicode=True,
        )
        dbpool = adbapi.ConnectionPool('MySQLdb', **dbargs)
        return cls(dbpool)

    def process_item(self, item, spider):
        # run db query in the thread pool
        d = self.dbpool.runInteraction(self._do_upsert, item, spider)
        d.addErrback(self._handle_error, item, spider)
        # at the end return the item in case of success or failure
        d.addBoth(lambda _: item)
        # return the deferred instead the item. This makes the engine to
        # process next item (according to CONCURRENT_ITEMS setting) after this
        # operation (deferred) has finished.
        return d

    def _do_upsert(self, conn, item, spider):
        """Perform an insert or update."""

        uid = self._get_guid(item)
        conn.execute("""SELECT EXISTS(
            SELECT 1 FROM huodong WHERE uid = %s
        )""", (uid))
        ret = conn.fetchone()[0]

        if ret:
            conn.execute("""
                UPDATE huodong
                SET title=%s, titlepic=%s, content=%s
                WHERE uid=%s
            """, [item['title'], item['images'][0]['path'], json.dumps(item['content'], skipkeys=True), uid])
            log.msg("Item updated in db: %s %r" % (uid, item))
        else:
            conn.execute("""
                    INSERT INTO huodong (`title`,`titlepic`,`content`,`uid`)
                    VALUES (%s,%s,%s,%s)
                """, (item['title'], item['images'][0]['path'], json.dumps(item['content'], skipkeys=True), uid))

            log.msg("Item stored in db: %s %r" % (uid, item))

    def _handle_error(self, failure, item, spider):
        """Handle occurred on db interaction."""
        # do nothing, just log
        log.msg(failure)

    def _get_guid(self, item):
        """Generates an unique identifier for a given item."""
        # hash based solely in the url field
        return item['uid']